{"version":3,"sources":["../../../src/routes/tbs.js"],"names":["router","Router","beerStore","get","req","res","next","params","brand","store","then","bsParse","resp","data","results","send","parseInventory","beerIDs","inventoryArray","beerId","all","Object","keys","map","id","spread","inventory","responseObject","scrapeResult","push"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,SAAS,kBAAQC,MAAR,EAAf;AACA,IAAMC,YAAY,4CAAlB;;AAEAF,OAAOG,GAAP,CAAW,oBAAX,EAAiC,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjD,oBAAMH,GAAN,CAAaD,SAAb,SAA0BE,IAAIG,MAAJ,CAAWC,KAArC,SAA8CJ,IAAIG,MAAJ,CAAWE,KAAzD,EACKC,IADL,CACW,gBAAQ;AACX,YAAIC,UAAU,8BAAoBC,KAAKC,IAAzB,EAA+B,UAACC,OAAD,EAAa;AACtDT,gBAAIU,IAAJ,CAASD,OAAT;AACH,SAFa,CAAd;AAGAH,gBAAQK,cAAR;AACH,KANL;AAOH,CARD;;AAUAhB,OAAOG,GAAP,CAAW,aAAX,EAA0B,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1C,QAAMW,UAAU;AACZ,cAAM,KADM;AAEZ,cAAM,MAFM;AAGZ,cAAM;AAHM,KAAhB;AAKA,QAAIC,iBAAiB,EAArB;AACA,QAAIC,SAAS,CAAb;AACA,oBAAMC,GAAN,CAAUC,OAAOC,IAAP,CAAYL,OAAZ,EAAqBM,GAArB,CAAyB,UAACC,EAAD,EAAQ;AACvC,eAAO,gBAAMrB,GAAN,CAAaD,SAAb,SAA0BsB,EAA1B,SAAgCpB,IAAIG,MAAJ,CAAWE,KAA3C,CAAP;AACH,KAFS,CAAV,EAEIC,IAFJ,CAES,gBAAMe,MAAN,CAAa,YAAkB;AAAA,0CAAdC,SAAc;AAAdA,qBAAc;AAAA;;AACpCA,kBAAUH,GAAV,CAAc,UAACI,cAAD,EAAoB;AAC9B,0CAAoBA,eAAed,IAAnC,EAAyC,UAACe,YAAD,EAAiB;AACtDV,+BAAeW,IAAf,CAAoBD,YAApB;AACH,aAFD,EAEGZ,cAFH;AAGH,SAJD;AAKAX,YAAIU,IAAJ,CAASG,cAAT;AACH,KAPQ,CAFT;AAUH,CAlBD;;kBAoBelB,M","file":"tbs.js","sourcesContent":["import express from 'express'\nimport axios from 'axios'\nimport beerStoreParser from '../utils/beerStoreParser'\n\nconst router = express.Router();\nconst beerStore = 'http://www.thebeerstore.ca/beers/inventory';\n\nrouter.get('/inv/:store/:brand', (req, res, next) => {\n    axios.get(`${beerStore}/${req.params.brand}/${req.params.store}`)\n        .then((resp => {\n            let bsParse = new beerStoreParser(resp.data, (results) => {\n                res.send(results);\n            });\n            bsParse.parseInventory();\n        }))\n});\n\nrouter.get('/inv/:store', (req, res, next) => {\n    const beerIDs = {\n        4111: \"PHA\",\n        4112: \"SNPA\",\n        4115: \"NHA\"\n    };\n    let inventoryArray = [];\n    let beerId = 0;\n    axios.all(Object.keys(beerIDs).map((id) => {\n        return axios.get(`${beerStore}/${id}/${req.params.store}`)\n    })).then(axios.spread((...inventory) => {\n        inventory.map((responseObject) => {\n            new beerStoreParser(responseObject.data, (scrapeResult) =>{\n                inventoryArray.push(scrapeResult);\n            }).parseInventory();\n        });\n        res.send(inventoryArray);\n    }))\n});\n\nexport default router;\n"]}