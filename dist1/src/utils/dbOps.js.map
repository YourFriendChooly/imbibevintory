{"version":3,"sources":["../../../src/utils/dbOps.js"],"names":["MongoClient","require","dbInterface","collection","url","process","env","MONGO_DB","getConnection","bind","Promise","resolve","reject","connect","err","db","console","log","then","c","find","toArray","docs","close","item","insertOne","TBS_STORE","test","get","result"],"mappings":";;;;;;;;;AAAA;;;;;;;;AAEA,IAAMA,cAAcC,QAAQ,SAAR,EAAmBD,WAAvC;;IAEaE,W,WAAAA,W;AACT,yBAAYC,UAAZ,EAAuB;AAAA;;AACnB,aAAKC,GAAL,GAAWC,QAAQC,GAAR,CAAYC,QAAvB;AACA,aAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,aAAKN,UAAL,GAAkBA,UAAlB;AACH;;;;wCAEe;AAAA;;AACZ,mBAAO,IAAIO,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCZ,4BAAYa,OAAZ,CAAoB,MAAKT,GAAzB,EAA8B,UAACU,GAAD,EAAMC,EAAN,EAAa;AAC3C,wBAAID,GAAJ,EAAQ;AACJE,gCAAQC,GAAR,CAAY,4BAAZ;AACAL,+BAAOE,GAAP;AACH,qBAHD,MAGO;AACHE,gCAAQC,GAAR,CAAY,gCAAZ;AACAN,gCAAQI,EAAR;AACH;AACJ,iBARG;AAQD,aATI,CAAP;AAUH;;;8BAEI;AAAA;;AACD,mBAAO,IAAIL,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACxC,uBAAKJ,aAAL,GACKU,IADL,CACU,UAACH,EAAD,EAAQ;AACV,wBAAII,IAAIJ,GAAGZ,UAAH,CAAc,OAAKA,UAAnB,CAAR;AACAgB,sBAAEC,IAAF,CAAO,EAAP,EAAWC,OAAX,CAAmB,UAACP,GAAD,EAAMQ,IAAN,EAAe;AAC9B,4BAAIR,GAAJ,EAAQ;AACJF,mCAAOE,GAAP;AACH,yBAFD,MAEO;AACHC,+BAAGQ,KAAH;AACAZ,oCAAQW,IAAR;AACH;AACJ,qBAPD;AAQH,iBAXL;AAYC,aAbM,CAAP;AAcH;;;4BAEGE,I,EAAK;AAAA;;AACL,iBAAKhB,aAAL,GACKU,IADL,CACU,UAACH,EAAD,EAAQ;AACV,oBAAII,IAAIJ,GAAGZ,UAAH,CAAc,OAAKA,UAAnB,CAAR;AACAgB,kBAAEM,SAAF,CAAYD,IAAZ,EACKN,IADL,CACU,YAAM;AACZH,uBAAGQ,KAAH;AACC,iBAHL;AAIH,aAPL;AAQH;;;+BAEMC,I,EAAK;AACR,iBAAKhB,aAAL,CAAmB,KAAKL,UAAxB,EACKe,IADL,CACU,UAACH,EAAD,EAAQ;AACV;AACH,aAHL;AAIH;;;;;;AAGL,IAAIW,YAAY,WAAhB;AACA,IAAIC,OAAO,IAAIzB,WAAJ,CAAgBwB,SAAhB,CAAX;AACAC,KAAKC,GAAL,GAAWV,IAAX,CAAiB,UAACW,MAAD,EAASf,GAAT,EAAiB;AAC1BE,YAAQC,GAAR,CAAaY,MAAb;AACH,CAFL","file":"dbOps.js","sourcesContent":["import assert from 'assert';\n\nconst MongoClient = require('mongodb').MongoClient;\n\nexport class dbInterface {\n    constructor(collection){\n        this.url = process.env.MONGO_DB;\n        this.getConnection = this.getConnection.bind(this);\n        this.collection = collection;\n    }\n\n    getConnection() {\n        return new Promise((resolve, reject) => {\n            MongoClient.connect(this.url, (err, db) => {\n            if (err){\n                console.log(\"Database Connection Failed\");\n                reject(err);\n            } else {\n                console.log(\"Database Connection Successful\");\n                resolve(db);\n            }\n        })})\n    }\n\n    get(){\n        return new Promise((resolve, reject) => {\n        this.getConnection()\n            .then((db) => {\n                var c = db.collection(this.collection);\n                c.find({}).toArray((err, docs) => {\n                    if (err){\n                        reject(err);\n                    } else {\n                        db.close;\n                        resolve(docs);\n                    }\n                })\n            })\n        })\n    }\n\n    add(item){\n        this.getConnection()\n            .then((db) => {\n                var c = db.collection(this.collection);\n                c.insertOne(item)\n                    .then(() => {\n                    db.close;\n                    })\n            })\n    }\n\n    remove(item){\n        this.getConnection(this.collection)\n            .then((db) => {\n                //TODO Remove\n            })\n    }\n}\n\nlet TBS_STORE = 'TBS_Store';\nlet test = new dbInterface(TBS_STORE);\ntest.get().then( (result, err) => {\n        console.log( result );\n    });"]}